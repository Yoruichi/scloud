// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Merchant.proto

package com.redteamobile.scloud;

/**
 * <pre>
 * Gaga service provider
 * </pre>
 *
 * Protobuf service {@code MerchantServ}
 */
public  abstract class MerchantServ
    implements com.google.protobuf.Service {
  protected MerchantServ() {}

  public interface Interface {
    /**
     * <code>rpc CheckSign(.CheckSignReq) returns (.CheckSignResp);</code>
     */
    public abstract void checkSign(
        com.google.protobuf.RpcController controller,
        com.redteamobile.scloud.CheckSignReq request,
        com.google.protobuf.RpcCallback<com.redteamobile.scloud.CheckSignResp> done);

    /**
     * <code>rpc SaveMerchant(.Merchant) returns (.MerchantInfo);</code>
     */
    public abstract void saveMerchant(
        com.google.protobuf.RpcController controller,
        com.redteamobile.scloud.Merchant request,
        com.google.protobuf.RpcCallback<com.redteamobile.scloud.MerchantInfo> done);

    /**
     * <code>rpc QueryMerchant(.QueryMerchantReq) returns (.MerchantInfo);</code>
     */
    public abstract void queryMerchant(
        com.google.protobuf.RpcController controller,
        com.redteamobile.scloud.QueryMerchantReq request,
        com.google.protobuf.RpcCallback<com.redteamobile.scloud.MerchantInfo> done);

  }

  public static com.google.protobuf.Service newReflectiveService(
      final Interface impl) {
    return new MerchantServ() {
      @java.lang.Override
      public  void checkSign(
          com.google.protobuf.RpcController controller,
          com.redteamobile.scloud.CheckSignReq request,
          com.google.protobuf.RpcCallback<com.redteamobile.scloud.CheckSignResp> done) {
        impl.checkSign(controller, request, done);
      }

      @java.lang.Override
      public  void saveMerchant(
          com.google.protobuf.RpcController controller,
          com.redteamobile.scloud.Merchant request,
          com.google.protobuf.RpcCallback<com.redteamobile.scloud.MerchantInfo> done) {
        impl.saveMerchant(controller, request, done);
      }

      @java.lang.Override
      public  void queryMerchant(
          com.google.protobuf.RpcController controller,
          com.redteamobile.scloud.QueryMerchantReq request,
          com.google.protobuf.RpcCallback<com.redteamobile.scloud.MerchantInfo> done) {
        impl.queryMerchant(controller, request, done);
      }

    };
  }

  public static com.google.protobuf.BlockingService
      newReflectiveBlockingService(final BlockingInterface impl) {
    return new com.google.protobuf.BlockingService() {
      public final com.google.protobuf.Descriptors.ServiceDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }

      public final com.google.protobuf.Message callBlockingMethod(
          com.google.protobuf.Descriptors.MethodDescriptor method,
          com.google.protobuf.RpcController controller,
          com.google.protobuf.Message request)
          throws com.google.protobuf.ServiceException {
        if (method.getService() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "Service.callBlockingMethod() given method descriptor for " +
            "wrong service type.");
        }
        switch(method.getIndex()) {
          case 0:
            return impl.checkSign(controller, (com.redteamobile.scloud.CheckSignReq)request);
          case 1:
            return impl.saveMerchant(controller, (com.redteamobile.scloud.Merchant)request);
          case 2:
            return impl.queryMerchant(controller, (com.redteamobile.scloud.QueryMerchantReq)request);
          default:
            throw new java.lang.AssertionError("Can't get here.");
        }
      }

      public final com.google.protobuf.Message
          getRequestPrototype(
          com.google.protobuf.Descriptors.MethodDescriptor method) {
        if (method.getService() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "Service.getRequestPrototype() given method " +
            "descriptor for wrong service type.");
        }
        switch(method.getIndex()) {
          case 0:
            return com.redteamobile.scloud.CheckSignReq.getDefaultInstance();
          case 1:
            return com.redteamobile.scloud.Merchant.getDefaultInstance();
          case 2:
            return com.redteamobile.scloud.QueryMerchantReq.getDefaultInstance();
          default:
            throw new java.lang.AssertionError("Can't get here.");
        }
      }

      public final com.google.protobuf.Message
          getResponsePrototype(
          com.google.protobuf.Descriptors.MethodDescriptor method) {
        if (method.getService() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "Service.getResponsePrototype() given method " +
            "descriptor for wrong service type.");
        }
        switch(method.getIndex()) {
          case 0:
            return com.redteamobile.scloud.CheckSignResp.getDefaultInstance();
          case 1:
            return com.redteamobile.scloud.MerchantInfo.getDefaultInstance();
          case 2:
            return com.redteamobile.scloud.MerchantInfo.getDefaultInstance();
          default:
            throw new java.lang.AssertionError("Can't get here.");
        }
      }

    };
  }

  /**
   * <code>rpc CheckSign(.CheckSignReq) returns (.CheckSignResp);</code>
   */
  public abstract void checkSign(
      com.google.protobuf.RpcController controller,
      com.redteamobile.scloud.CheckSignReq request,
      com.google.protobuf.RpcCallback<com.redteamobile.scloud.CheckSignResp> done);

  /**
   * <code>rpc SaveMerchant(.Merchant) returns (.MerchantInfo);</code>
   */
  public abstract void saveMerchant(
      com.google.protobuf.RpcController controller,
      com.redteamobile.scloud.Merchant request,
      com.google.protobuf.RpcCallback<com.redteamobile.scloud.MerchantInfo> done);

  /**
   * <code>rpc QueryMerchant(.QueryMerchantReq) returns (.MerchantInfo);</code>
   */
  public abstract void queryMerchant(
      com.google.protobuf.RpcController controller,
      com.redteamobile.scloud.QueryMerchantReq request,
      com.google.protobuf.RpcCallback<com.redteamobile.scloud.MerchantInfo> done);

  public static final
      com.google.protobuf.Descriptors.ServiceDescriptor
      getDescriptor() {
    return com.redteamobile.scloud.MerchantPb.getDescriptor().getServices().get(0);
  }
  public final com.google.protobuf.Descriptors.ServiceDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }

  public final void callMethod(
      com.google.protobuf.Descriptors.MethodDescriptor method,
      com.google.protobuf.RpcController controller,
      com.google.protobuf.Message request,
      com.google.protobuf.RpcCallback<
        com.google.protobuf.Message> done) {
    if (method.getService() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "Service.callMethod() given method descriptor for wrong " +
        "service type.");
    }
    switch(method.getIndex()) {
      case 0:
        this.checkSign(controller, (com.redteamobile.scloud.CheckSignReq)request,
          com.google.protobuf.RpcUtil.<com.redteamobile.scloud.CheckSignResp>specializeCallback(
            done));
        return;
      case 1:
        this.saveMerchant(controller, (com.redteamobile.scloud.Merchant)request,
          com.google.protobuf.RpcUtil.<com.redteamobile.scloud.MerchantInfo>specializeCallback(
            done));
        return;
      case 2:
        this.queryMerchant(controller, (com.redteamobile.scloud.QueryMerchantReq)request,
          com.google.protobuf.RpcUtil.<com.redteamobile.scloud.MerchantInfo>specializeCallback(
            done));
        return;
      default:
        throw new java.lang.AssertionError("Can't get here.");
    }
  }

  public final com.google.protobuf.Message
      getRequestPrototype(
      com.google.protobuf.Descriptors.MethodDescriptor method) {
    if (method.getService() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "Service.getRequestPrototype() given method " +
        "descriptor for wrong service type.");
    }
    switch(method.getIndex()) {
      case 0:
        return com.redteamobile.scloud.CheckSignReq.getDefaultInstance();
      case 1:
        return com.redteamobile.scloud.Merchant.getDefaultInstance();
      case 2:
        return com.redteamobile.scloud.QueryMerchantReq.getDefaultInstance();
      default:
        throw new java.lang.AssertionError("Can't get here.");
    }
  }

  public final com.google.protobuf.Message
      getResponsePrototype(
      com.google.protobuf.Descriptors.MethodDescriptor method) {
    if (method.getService() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "Service.getResponsePrototype() given method " +
        "descriptor for wrong service type.");
    }
    switch(method.getIndex()) {
      case 0:
        return com.redteamobile.scloud.CheckSignResp.getDefaultInstance();
      case 1:
        return com.redteamobile.scloud.MerchantInfo.getDefaultInstance();
      case 2:
        return com.redteamobile.scloud.MerchantInfo.getDefaultInstance();
      default:
        throw new java.lang.AssertionError("Can't get here.");
    }
  }

  public static Stub newStub(
      com.google.protobuf.RpcChannel channel) {
    return new Stub(channel);
  }

  public static final class Stub extends com.redteamobile.scloud.MerchantServ implements Interface {
    private Stub(com.google.protobuf.RpcChannel channel) {
      this.channel = channel;
    }

    private final com.google.protobuf.RpcChannel channel;

    public com.google.protobuf.RpcChannel getChannel() {
      return channel;
    }

    public  void checkSign(
        com.google.protobuf.RpcController controller,
        com.redteamobile.scloud.CheckSignReq request,
        com.google.protobuf.RpcCallback<com.redteamobile.scloud.CheckSignResp> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(0),
        controller,
        request,
        com.redteamobile.scloud.CheckSignResp.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          com.redteamobile.scloud.CheckSignResp.class,
          com.redteamobile.scloud.CheckSignResp.getDefaultInstance()));
    }

    public  void saveMerchant(
        com.google.protobuf.RpcController controller,
        com.redteamobile.scloud.Merchant request,
        com.google.protobuf.RpcCallback<com.redteamobile.scloud.MerchantInfo> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(1),
        controller,
        request,
        com.redteamobile.scloud.MerchantInfo.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          com.redteamobile.scloud.MerchantInfo.class,
          com.redteamobile.scloud.MerchantInfo.getDefaultInstance()));
    }

    public  void queryMerchant(
        com.google.protobuf.RpcController controller,
        com.redteamobile.scloud.QueryMerchantReq request,
        com.google.protobuf.RpcCallback<com.redteamobile.scloud.MerchantInfo> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(2),
        controller,
        request,
        com.redteamobile.scloud.MerchantInfo.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          com.redteamobile.scloud.MerchantInfo.class,
          com.redteamobile.scloud.MerchantInfo.getDefaultInstance()));
    }
  }

  public static BlockingInterface newBlockingStub(
      com.google.protobuf.BlockingRpcChannel channel) {
    return new BlockingStub(channel);
  }

  public interface BlockingInterface {
    public com.redteamobile.scloud.CheckSignResp checkSign(
        com.google.protobuf.RpcController controller,
        com.redteamobile.scloud.CheckSignReq request)
        throws com.google.protobuf.ServiceException;

    public com.redteamobile.scloud.MerchantInfo saveMerchant(
        com.google.protobuf.RpcController controller,
        com.redteamobile.scloud.Merchant request)
        throws com.google.protobuf.ServiceException;

    public com.redteamobile.scloud.MerchantInfo queryMerchant(
        com.google.protobuf.RpcController controller,
        com.redteamobile.scloud.QueryMerchantReq request)
        throws com.google.protobuf.ServiceException;
  }

  private static final class BlockingStub implements BlockingInterface {
    private BlockingStub(com.google.protobuf.BlockingRpcChannel channel) {
      this.channel = channel;
    }

    private final com.google.protobuf.BlockingRpcChannel channel;

    public com.redteamobile.scloud.CheckSignResp checkSign(
        com.google.protobuf.RpcController controller,
        com.redteamobile.scloud.CheckSignReq request)
        throws com.google.protobuf.ServiceException {
      return (com.redteamobile.scloud.CheckSignResp) channel.callBlockingMethod(
        getDescriptor().getMethods().get(0),
        controller,
        request,
        com.redteamobile.scloud.CheckSignResp.getDefaultInstance());
    }


    public com.redteamobile.scloud.MerchantInfo saveMerchant(
        com.google.protobuf.RpcController controller,
        com.redteamobile.scloud.Merchant request)
        throws com.google.protobuf.ServiceException {
      return (com.redteamobile.scloud.MerchantInfo) channel.callBlockingMethod(
        getDescriptor().getMethods().get(1),
        controller,
        request,
        com.redteamobile.scloud.MerchantInfo.getDefaultInstance());
    }


    public com.redteamobile.scloud.MerchantInfo queryMerchant(
        com.google.protobuf.RpcController controller,
        com.redteamobile.scloud.QueryMerchantReq request)
        throws com.google.protobuf.ServiceException {
      return (com.redteamobile.scloud.MerchantInfo) channel.callBlockingMethod(
        getDescriptor().getMethods().get(2),
        controller,
        request,
        com.redteamobile.scloud.MerchantInfo.getDefaultInstance());
    }

  }

  // @@protoc_insertion_point(class_scope:MerchantServ)
}

